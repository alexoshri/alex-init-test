# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ardrone_project/ImageCalc.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class ImageCalc(genpy.Message):
  _md5sum = "3afd21e3cae9a39680ff48a9777413f3"
  _type = "ardrone_project/ImageCalc"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time time_stamp
bool is_visible
float32 shift
float32 angle
float32 distance
int32 arrow_x
int32 arrow_y

"""
  __slots__ = ['time_stamp','is_visible','shift','angle','distance','arrow_x','arrow_y']
  _slot_types = ['time','bool','float32','float32','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_stamp,is_visible,shift,angle,distance,arrow_x,arrow_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImageCalc, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      if self.is_visible is None:
        self.is_visible = False
      if self.shift is None:
        self.shift = 0.
      if self.angle is None:
        self.angle = 0.
      if self.distance is None:
        self.distance = 0.
      if self.arrow_x is None:
        self.arrow_x = 0
      if self.arrow_y is None:
        self.arrow_y = 0
    else:
      self.time_stamp = genpy.Time()
      self.is_visible = False
      self.shift = 0.
      self.angle = 0.
      self.distance = 0.
      self.arrow_x = 0
      self.arrow_y = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2IB3f2i.pack(_x.time_stamp.secs, _x.time_stamp.nsecs, _x.is_visible, _x.shift, _x.angle, _x.distance, _x.arrow_x, _x.arrow_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.time_stamp.secs, _x.time_stamp.nsecs, _x.is_visible, _x.shift, _x.angle, _x.distance, _x.arrow_x, _x.arrow_y,) = _struct_2IB3f2i.unpack(str[start:end])
      self.is_visible = bool(self.is_visible)
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2IB3f2i.pack(_x.time_stamp.secs, _x.time_stamp.nsecs, _x.is_visible, _x.shift, _x.angle, _x.distance, _x.arrow_x, _x.arrow_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.time_stamp.secs, _x.time_stamp.nsecs, _x.is_visible, _x.shift, _x.angle, _x.distance, _x.arrow_x, _x.arrow_y,) = _struct_2IB3f2i.unpack(str[start:end])
      self.is_visible = bool(self.is_visible)
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2IB3f2i = struct.Struct("<2IB3f2i")
